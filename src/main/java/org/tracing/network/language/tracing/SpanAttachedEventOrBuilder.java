// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tracing.proto

package org.tracing.network.language.tracing;

public interface SpanAttachedEventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:deeptracing.v1.SpanAttachedEvent)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The nanosecond timestamp of the event's start time.
   * Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
   * Because the attached event happens in the OS syscall level, most of them are executed rapidly.
   * </pre>
   *
   * <code>.deeptracing.v1.Instant startTime = 1;</code>
   * @return Whether the startTime field is set.
   */
  boolean hasStartTime();
  /**
   * <pre>
   * The nanosecond timestamp of the event's start time.
   * Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
   * Because the attached event happens in the OS syscall level, most of them are executed rapidly.
   * </pre>
   *
   * <code>.deeptracing.v1.Instant startTime = 1;</code>
   * @return The startTime.
   */
  org.tracing.network.language.common.Instant getStartTime();
  /**
   * <pre>
   * The nanosecond timestamp of the event's start time.
   * Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
   * Because the attached event happens in the OS syscall level, most of them are executed rapidly.
   * </pre>
   *
   * <code>.deeptracing.v1.Instant startTime = 1;</code>
   */
  org.tracing.network.language.common.InstantOrBuilder getStartTimeOrBuilder();

  /**
   * <pre>
   * The official event name.
   * For example, the event name is a method signature from syscall stack.
   * </pre>
   *
   * <code>string event = 2;</code>
   * @return The event.
   */
  java.lang.String getEvent();
  /**
   * <pre>
   * The official event name.
   * For example, the event name is a method signature from syscall stack.
   * </pre>
   *
   * <code>string event = 2;</code>
   * @return The bytes for event.
   */
  com.google.protobuf.ByteString
      getEventBytes();

  /**
   * <pre>
   * [Optional] The nanosecond timestamp of the event's end time.
   * </pre>
   *
   * <code>.deeptracing.v1.Instant endTime = 3;</code>
   * @return Whether the endTime field is set.
   */
  boolean hasEndTime();
  /**
   * <pre>
   * [Optional] The nanosecond timestamp of the event's end time.
   * </pre>
   *
   * <code>.deeptracing.v1.Instant endTime = 3;</code>
   * @return The endTime.
   */
  org.tracing.network.language.common.Instant getEndTime();
  /**
   * <pre>
   * [Optional] The nanosecond timestamp of the event's end time.
   * </pre>
   *
   * <code>.deeptracing.v1.Instant endTime = 3;</code>
   */
  org.tracing.network.language.common.InstantOrBuilder getEndTimeOrBuilder();

  /**
   * <pre>
   * The tags for this event includes some extra OS level information,
   * such as
   * 1. net_device used for this exit span.
   * 2. network L7 protocol
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
   */
  java.util.List<org.tracing.network.language.common.KeyStringValuePair> 
      getTagsList();
  /**
   * <pre>
   * The tags for this event includes some extra OS level information,
   * such as
   * 1. net_device used for this exit span.
   * 2. network L7 protocol
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
   */
  org.tracing.network.language.common.KeyStringValuePair getTags(int index);
  /**
   * <pre>
   * The tags for this event includes some extra OS level information,
   * such as
   * 1. net_device used for this exit span.
   * 2. network L7 protocol
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
   */
  int getTagsCount();
  /**
   * <pre>
   * The tags for this event includes some extra OS level information,
   * such as
   * 1. net_device used for this exit span.
   * 2. network L7 protocol
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
   */
  java.util.List<? extends org.tracing.network.language.common.KeyStringValuePairOrBuilder> 
      getTagsOrBuilderList();
  /**
   * <pre>
   * The tags for this event includes some extra OS level information,
   * such as
   * 1. net_device used for this exit span.
   * 2. network L7 protocol
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
   */
  org.tracing.network.language.common.KeyStringValuePairOrBuilder getTagsOrBuilder(
      int index);

  /**
   * <pre>
   * The summary of statistics during this event.
   * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
   */
  java.util.List<org.tracing.network.language.common.KeyIntValuePair> 
      getSummaryList();
  /**
   * <pre>
   * The summary of statistics during this event.
   * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
   */
  org.tracing.network.language.common.KeyIntValuePair getSummary(int index);
  /**
   * <pre>
   * The summary of statistics during this event.
   * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
   */
  int getSummaryCount();
  /**
   * <pre>
   * The summary of statistics during this event.
   * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
   */
  java.util.List<? extends org.tracing.network.language.common.KeyIntValuePairOrBuilder> 
      getSummaryOrBuilderList();
  /**
   * <pre>
   * The summary of statistics during this event.
   * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
   */
  org.tracing.network.language.common.KeyIntValuePairOrBuilder getSummaryOrBuilder(
      int index);

  /**
   * <pre>
   * Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
   * https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
   * </pre>
   *
   * <code>.deeptracing.v1.SpanAttachedEvent.SpanReference traceContext = 6;</code>
   * @return Whether the traceContext field is set.
   */
  boolean hasTraceContext();
  /**
   * <pre>
   * Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
   * https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
   * </pre>
   *
   * <code>.deeptracing.v1.SpanAttachedEvent.SpanReference traceContext = 6;</code>
   * @return The traceContext.
   */
  org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference getTraceContext();
  /**
   * <pre>
   * Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
   * https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
   * </pre>
   *
   * <code>.deeptracing.v1.SpanAttachedEvent.SpanReference traceContext = 6;</code>
   */
  org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceOrBuilder getTraceContextOrBuilder();
}
