// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tracing.proto

package org.tracing.network.language.tracing;

/**
 * <pre>
 * SpanAttachedEvent represents an attached event for a traced RPC.
 *
 * When an RPC is being traced by the in-process language agent, a span would be reported by the client-side agent.
 * And the rover would be aware of this RPC due to the existing tracing header.
 * Then, the rover agent collects extra information from the OS level to provide assistance information to diagnose network performance.
 * </pre>
 *
 * Protobuf type {@code deeptracing.v1.SpanAttachedEvent}
 */
public final class SpanAttachedEvent extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:deeptracing.v1.SpanAttachedEvent)
    SpanAttachedEventOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SpanAttachedEvent.newBuilder() to construct.
  private SpanAttachedEvent(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SpanAttachedEvent() {
    event_ = "";
    tags_ = java.util.Collections.emptyList();
    summary_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SpanAttachedEvent();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.tracing.network.language.tracing.Tracing.internal_static_deeptracing_v1_SpanAttachedEvent_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.tracing.network.language.tracing.Tracing.internal_static_deeptracing_v1_SpanAttachedEvent_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.tracing.network.language.tracing.SpanAttachedEvent.class, org.tracing.network.language.tracing.SpanAttachedEvent.Builder.class);
  }

  /**
   * Protobuf enum {@code deeptracing.v1.SpanAttachedEvent.SpanReferenceType}
   */
  public enum SpanReferenceType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SKYWALKING = 0;</code>
     */
    SKYWALKING(0),
    /**
     * <code>ZIPKIN = 1;</code>
     */
    ZIPKIN(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>SKYWALKING = 0;</code>
     */
    public static final int SKYWALKING_VALUE = 0;
    /**
     * <code>ZIPKIN = 1;</code>
     */
    public static final int ZIPKIN_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SpanReferenceType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SpanReferenceType forNumber(int value) {
      switch (value) {
        case 0: return SKYWALKING;
        case 1: return ZIPKIN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SpanReferenceType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SpanReferenceType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SpanReferenceType>() {
            public SpanReferenceType findValueByNumber(int number) {
              return SpanReferenceType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.tracing.network.language.tracing.SpanAttachedEvent.getDescriptor().getEnumTypes().get(0);
    }

    private static final SpanReferenceType[] VALUES = values();

    public static SpanReferenceType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SpanReferenceType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:deeptracing.v1.SpanAttachedEvent.SpanReferenceType)
  }

  public interface SpanReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:deeptracing.v1.SpanAttachedEvent.SpanReference)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.deeptracing.v1.SpanAttachedEvent.SpanReferenceType type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <code>.deeptracing.v1.SpanAttachedEvent.SpanReferenceType type = 1;</code>
     * @return The type.
     */
    org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceType getType();

    /**
     * <pre>
     * [Optional] A string id represents the whole trace.
     * </pre>
     *
     * <code>string traceId = 2;</code>
     * @return The traceId.
     */
    java.lang.String getTraceId();
    /**
     * <pre>
     * [Optional] A string id represents the whole trace.
     * </pre>
     *
     * <code>string traceId = 2;</code>
     * @return The bytes for traceId.
     */
    com.google.protobuf.ByteString
        getTraceIdBytes();

    /**
     * <pre>
     * A unique id represents this segment. Other segments could use this id to reference as a child segment.
     * [Optional] when this span reference
     * </pre>
     *
     * <code>string traceSegmentId = 3;</code>
     * @return The traceSegmentId.
     */
    java.lang.String getTraceSegmentId();
    /**
     * <pre>
     * A unique id represents this segment. Other segments could use this id to reference as a child segment.
     * [Optional] when this span reference
     * </pre>
     *
     * <code>string traceSegmentId = 3;</code>
     * @return The bytes for traceSegmentId.
     */
    com.google.protobuf.ByteString
        getTraceSegmentIdBytes();

    /**
     * <pre>
     * If type == SKYWALKING
     * The number id of the span. Should be unique in the whole segment.
     * Starting at 0
     *
     * If type == ZIPKIN
     * The type of span ID is string.
     * </pre>
     *
     * <code>string spanId = 4;</code>
     * @return The spanId.
     */
    java.lang.String getSpanId();
    /**
     * <pre>
     * If type == SKYWALKING
     * The number id of the span. Should be unique in the whole segment.
     * Starting at 0
     *
     * If type == ZIPKIN
     * The type of span ID is string.
     * </pre>
     *
     * <code>string spanId = 4;</code>
     * @return The bytes for spanId.
     */
    com.google.protobuf.ByteString
        getSpanIdBytes();
  }
  /**
   * Protobuf type {@code deeptracing.v1.SpanAttachedEvent.SpanReference}
   */
  public static final class SpanReference extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:deeptracing.v1.SpanAttachedEvent.SpanReference)
      SpanReferenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SpanReference.newBuilder() to construct.
    private SpanReference(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SpanReference() {
      type_ = 0;
      traceId_ = "";
      traceSegmentId_ = "";
      spanId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SpanReference();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tracing.network.language.tracing.Tracing.internal_static_deeptracing_v1_SpanAttachedEvent_SpanReference_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tracing.network.language.tracing.Tracing.internal_static_deeptracing_v1_SpanAttachedEvent_SpanReference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.class, org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.Builder.class);
    }

    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_ = 0;
    /**
     * <code>.deeptracing.v1.SpanAttachedEvent.SpanReferenceType type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <code>.deeptracing.v1.SpanAttachedEvent.SpanReferenceType type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceType getType() {
      org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceType result = org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceType.forNumber(type_);
      return result == null ? org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceType.UNRECOGNIZED : result;
    }

    public static final int TRACEID_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object traceId_ = "";
    /**
     * <pre>
     * [Optional] A string id represents the whole trace.
     * </pre>
     *
     * <code>string traceId = 2;</code>
     * @return The traceId.
     */
    @java.lang.Override
    public java.lang.String getTraceId() {
      java.lang.Object ref = traceId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        traceId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * [Optional] A string id represents the whole trace.
     * </pre>
     *
     * <code>string traceId = 2;</code>
     * @return The bytes for traceId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTraceIdBytes() {
      java.lang.Object ref = traceId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        traceId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TRACESEGMENTID_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object traceSegmentId_ = "";
    /**
     * <pre>
     * A unique id represents this segment. Other segments could use this id to reference as a child segment.
     * [Optional] when this span reference
     * </pre>
     *
     * <code>string traceSegmentId = 3;</code>
     * @return The traceSegmentId.
     */
    @java.lang.Override
    public java.lang.String getTraceSegmentId() {
      java.lang.Object ref = traceSegmentId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        traceSegmentId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A unique id represents this segment. Other segments could use this id to reference as a child segment.
     * [Optional] when this span reference
     * </pre>
     *
     * <code>string traceSegmentId = 3;</code>
     * @return The bytes for traceSegmentId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTraceSegmentIdBytes() {
      java.lang.Object ref = traceSegmentId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        traceSegmentId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SPANID_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object spanId_ = "";
    /**
     * <pre>
     * If type == SKYWALKING
     * The number id of the span. Should be unique in the whole segment.
     * Starting at 0
     *
     * If type == ZIPKIN
     * The type of span ID is string.
     * </pre>
     *
     * <code>string spanId = 4;</code>
     * @return The spanId.
     */
    @java.lang.Override
    public java.lang.String getSpanId() {
      java.lang.Object ref = spanId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        spanId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * If type == SKYWALKING
     * The number id of the span. Should be unique in the whole segment.
     * Starting at 0
     *
     * If type == ZIPKIN
     * The type of span ID is string.
     * </pre>
     *
     * <code>string spanId = 4;</code>
     * @return The bytes for spanId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSpanIdBytes() {
      java.lang.Object ref = spanId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        spanId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceType.SKYWALKING.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(traceId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, traceId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(traceSegmentId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, traceSegmentId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(spanId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, spanId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceType.SKYWALKING.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(traceId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, traceId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(traceSegmentId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, traceSegmentId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(spanId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, spanId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference)) {
        return super.equals(obj);
      }
      org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference other = (org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference) obj;

      if (type_ != other.type_) return false;
      if (!getTraceId()
          .equals(other.getTraceId())) return false;
      if (!getTraceSegmentId()
          .equals(other.getTraceSegmentId())) return false;
      if (!getSpanId()
          .equals(other.getSpanId())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + TRACEID_FIELD_NUMBER;
      hash = (53 * hash) + getTraceId().hashCode();
      hash = (37 * hash) + TRACESEGMENTID_FIELD_NUMBER;
      hash = (53 * hash) + getTraceSegmentId().hashCode();
      hash = (37 * hash) + SPANID_FIELD_NUMBER;
      hash = (53 * hash) + getSpanId().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code deeptracing.v1.SpanAttachedEvent.SpanReference}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:deeptracing.v1.SpanAttachedEvent.SpanReference)
        org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.tracing.network.language.tracing.Tracing.internal_static_deeptracing_v1_SpanAttachedEvent_SpanReference_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.tracing.network.language.tracing.Tracing.internal_static_deeptracing_v1_SpanAttachedEvent_SpanReference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.class, org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.Builder.class);
      }

      // Construct using org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0;
        traceId_ = "";
        traceSegmentId_ = "";
        spanId_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.tracing.network.language.tracing.Tracing.internal_static_deeptracing_v1_SpanAttachedEvent_SpanReference_descriptor;
      }

      @java.lang.Override
      public org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference getDefaultInstanceForType() {
        return org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.getDefaultInstance();
      }

      @java.lang.Override
      public org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference build() {
        org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference buildPartial() {
        org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference result = new org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.traceId_ = traceId_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.traceSegmentId_ = traceSegmentId_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.spanId_ = spanId_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference) {
          return mergeFrom((org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference other) {
        if (other == org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (!other.getTraceId().isEmpty()) {
          traceId_ = other.traceId_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (!other.getTraceSegmentId().isEmpty()) {
          traceSegmentId_ = other.traceSegmentId_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (!other.getSpanId().isEmpty()) {
          spanId_ = other.spanId_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                traceId_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                traceSegmentId_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                spanId_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <code>.deeptracing.v1.SpanAttachedEvent.SpanReferenceType type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <code>.deeptracing.v1.SpanAttachedEvent.SpanReferenceType type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.deeptracing.v1.SpanAttachedEvent.SpanReferenceType type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceType getType() {
        org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceType result = org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceType.forNumber(type_);
        return result == null ? org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceType.UNRECOGNIZED : result;
      }
      /**
       * <code>.deeptracing.v1.SpanAttachedEvent.SpanReferenceType type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.deeptracing.v1.SpanAttachedEvent.SpanReferenceType type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object traceId_ = "";
      /**
       * <pre>
       * [Optional] A string id represents the whole trace.
       * </pre>
       *
       * <code>string traceId = 2;</code>
       * @return The traceId.
       */
      public java.lang.String getTraceId() {
        java.lang.Object ref = traceId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          traceId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * [Optional] A string id represents the whole trace.
       * </pre>
       *
       * <code>string traceId = 2;</code>
       * @return The bytes for traceId.
       */
      public com.google.protobuf.ByteString
          getTraceIdBytes() {
        java.lang.Object ref = traceId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          traceId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * [Optional] A string id represents the whole trace.
       * </pre>
       *
       * <code>string traceId = 2;</code>
       * @param value The traceId to set.
       * @return This builder for chaining.
       */
      public Builder setTraceId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        traceId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * [Optional] A string id represents the whole trace.
       * </pre>
       *
       * <code>string traceId = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTraceId() {
        traceId_ = getDefaultInstance().getTraceId();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * [Optional] A string id represents the whole trace.
       * </pre>
       *
       * <code>string traceId = 2;</code>
       * @param value The bytes for traceId to set.
       * @return This builder for chaining.
       */
      public Builder setTraceIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        traceId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object traceSegmentId_ = "";
      /**
       * <pre>
       * A unique id represents this segment. Other segments could use this id to reference as a child segment.
       * [Optional] when this span reference
       * </pre>
       *
       * <code>string traceSegmentId = 3;</code>
       * @return The traceSegmentId.
       */
      public java.lang.String getTraceSegmentId() {
        java.lang.Object ref = traceSegmentId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          traceSegmentId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A unique id represents this segment. Other segments could use this id to reference as a child segment.
       * [Optional] when this span reference
       * </pre>
       *
       * <code>string traceSegmentId = 3;</code>
       * @return The bytes for traceSegmentId.
       */
      public com.google.protobuf.ByteString
          getTraceSegmentIdBytes() {
        java.lang.Object ref = traceSegmentId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          traceSegmentId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A unique id represents this segment. Other segments could use this id to reference as a child segment.
       * [Optional] when this span reference
       * </pre>
       *
       * <code>string traceSegmentId = 3;</code>
       * @param value The traceSegmentId to set.
       * @return This builder for chaining.
       */
      public Builder setTraceSegmentId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        traceSegmentId_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A unique id represents this segment. Other segments could use this id to reference as a child segment.
       * [Optional] when this span reference
       * </pre>
       *
       * <code>string traceSegmentId = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTraceSegmentId() {
        traceSegmentId_ = getDefaultInstance().getTraceSegmentId();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A unique id represents this segment. Other segments could use this id to reference as a child segment.
       * [Optional] when this span reference
       * </pre>
       *
       * <code>string traceSegmentId = 3;</code>
       * @param value The bytes for traceSegmentId to set.
       * @return This builder for chaining.
       */
      public Builder setTraceSegmentIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        traceSegmentId_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private java.lang.Object spanId_ = "";
      /**
       * <pre>
       * If type == SKYWALKING
       * The number id of the span. Should be unique in the whole segment.
       * Starting at 0
       *
       * If type == ZIPKIN
       * The type of span ID is string.
       * </pre>
       *
       * <code>string spanId = 4;</code>
       * @return The spanId.
       */
      public java.lang.String getSpanId() {
        java.lang.Object ref = spanId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          spanId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * If type == SKYWALKING
       * The number id of the span. Should be unique in the whole segment.
       * Starting at 0
       *
       * If type == ZIPKIN
       * The type of span ID is string.
       * </pre>
       *
       * <code>string spanId = 4;</code>
       * @return The bytes for spanId.
       */
      public com.google.protobuf.ByteString
          getSpanIdBytes() {
        java.lang.Object ref = spanId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          spanId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * If type == SKYWALKING
       * The number id of the span. Should be unique in the whole segment.
       * Starting at 0
       *
       * If type == ZIPKIN
       * The type of span ID is string.
       * </pre>
       *
       * <code>string spanId = 4;</code>
       * @param value The spanId to set.
       * @return This builder for chaining.
       */
      public Builder setSpanId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        spanId_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If type == SKYWALKING
       * The number id of the span. Should be unique in the whole segment.
       * Starting at 0
       *
       * If type == ZIPKIN
       * The type of span ID is string.
       * </pre>
       *
       * <code>string spanId = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpanId() {
        spanId_ = getDefaultInstance().getSpanId();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If type == SKYWALKING
       * The number id of the span. Should be unique in the whole segment.
       * Starting at 0
       *
       * If type == ZIPKIN
       * The type of span ID is string.
       * </pre>
       *
       * <code>string spanId = 4;</code>
       * @param value The bytes for spanId to set.
       * @return This builder for chaining.
       */
      public Builder setSpanIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        spanId_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:deeptracing.v1.SpanAttachedEvent.SpanReference)
    }

    // @@protoc_insertion_point(class_scope:deeptracing.v1.SpanAttachedEvent.SpanReference)
    private static final org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference();
    }

    public static org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SpanReference>
        PARSER = new com.google.protobuf.AbstractParser<SpanReference>() {
      @java.lang.Override
      public SpanReference parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SpanReference> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SpanReference> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int STARTTIME_FIELD_NUMBER = 1;
  private org.tracing.network.language.common.Instant startTime_;
  /**
   * <pre>
   * The nanosecond timestamp of the event's start time.
   * Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
   * Because the attached event happens in the OS syscall level, most of them are executed rapidly.
   * </pre>
   *
   * <code>.deeptracing.v1.Instant startTime = 1;</code>
   * @return Whether the startTime field is set.
   */
  @java.lang.Override
  public boolean hasStartTime() {
    return startTime_ != null;
  }
  /**
   * <pre>
   * The nanosecond timestamp of the event's start time.
   * Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
   * Because the attached event happens in the OS syscall level, most of them are executed rapidly.
   * </pre>
   *
   * <code>.deeptracing.v1.Instant startTime = 1;</code>
   * @return The startTime.
   */
  @java.lang.Override
  public org.tracing.network.language.common.Instant getStartTime() {
    return startTime_ == null ? org.tracing.network.language.common.Instant.getDefaultInstance() : startTime_;
  }
  /**
   * <pre>
   * The nanosecond timestamp of the event's start time.
   * Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
   * Because the attached event happens in the OS syscall level, most of them are executed rapidly.
   * </pre>
   *
   * <code>.deeptracing.v1.Instant startTime = 1;</code>
   */
  @java.lang.Override
  public org.tracing.network.language.common.InstantOrBuilder getStartTimeOrBuilder() {
    return startTime_ == null ? org.tracing.network.language.common.Instant.getDefaultInstance() : startTime_;
  }

  public static final int EVENT_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object event_ = "";
  /**
   * <pre>
   * The official event name.
   * For example, the event name is a method signature from syscall stack.
   * </pre>
   *
   * <code>string event = 2;</code>
   * @return The event.
   */
  @java.lang.Override
  public java.lang.String getEvent() {
    java.lang.Object ref = event_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      event_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The official event name.
   * For example, the event name is a method signature from syscall stack.
   * </pre>
   *
   * <code>string event = 2;</code>
   * @return The bytes for event.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getEventBytes() {
    java.lang.Object ref = event_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      event_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ENDTIME_FIELD_NUMBER = 3;
  private org.tracing.network.language.common.Instant endTime_;
  /**
   * <pre>
   * [Optional] The nanosecond timestamp of the event's end time.
   * </pre>
   *
   * <code>.deeptracing.v1.Instant endTime = 3;</code>
   * @return Whether the endTime field is set.
   */
  @java.lang.Override
  public boolean hasEndTime() {
    return endTime_ != null;
  }
  /**
   * <pre>
   * [Optional] The nanosecond timestamp of the event's end time.
   * </pre>
   *
   * <code>.deeptracing.v1.Instant endTime = 3;</code>
   * @return The endTime.
   */
  @java.lang.Override
  public org.tracing.network.language.common.Instant getEndTime() {
    return endTime_ == null ? org.tracing.network.language.common.Instant.getDefaultInstance() : endTime_;
  }
  /**
   * <pre>
   * [Optional] The nanosecond timestamp of the event's end time.
   * </pre>
   *
   * <code>.deeptracing.v1.Instant endTime = 3;</code>
   */
  @java.lang.Override
  public org.tracing.network.language.common.InstantOrBuilder getEndTimeOrBuilder() {
    return endTime_ == null ? org.tracing.network.language.common.Instant.getDefaultInstance() : endTime_;
  }

  public static final int TAGS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<org.tracing.network.language.common.KeyStringValuePair> tags_;
  /**
   * <pre>
   * The tags for this event includes some extra OS level information,
   * such as
   * 1. net_device used for this exit span.
   * 2. network L7 protocol
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
   */
  @java.lang.Override
  public java.util.List<org.tracing.network.language.common.KeyStringValuePair> getTagsList() {
    return tags_;
  }
  /**
   * <pre>
   * The tags for this event includes some extra OS level information,
   * such as
   * 1. net_device used for this exit span.
   * 2. network L7 protocol
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
   */
  @java.lang.Override
  public java.util.List<? extends org.tracing.network.language.common.KeyStringValuePairOrBuilder> 
      getTagsOrBuilderList() {
    return tags_;
  }
  /**
   * <pre>
   * The tags for this event includes some extra OS level information,
   * such as
   * 1. net_device used for this exit span.
   * 2. network L7 protocol
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
   */
  @java.lang.Override
  public int getTagsCount() {
    return tags_.size();
  }
  /**
   * <pre>
   * The tags for this event includes some extra OS level information,
   * such as
   * 1. net_device used for this exit span.
   * 2. network L7 protocol
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
   */
  @java.lang.Override
  public org.tracing.network.language.common.KeyStringValuePair getTags(int index) {
    return tags_.get(index);
  }
  /**
   * <pre>
   * The tags for this event includes some extra OS level information,
   * such as
   * 1. net_device used for this exit span.
   * 2. network L7 protocol
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
   */
  @java.lang.Override
  public org.tracing.network.language.common.KeyStringValuePairOrBuilder getTagsOrBuilder(
      int index) {
    return tags_.get(index);
  }

  public static final int SUMMARY_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private java.util.List<org.tracing.network.language.common.KeyIntValuePair> summary_;
  /**
   * <pre>
   * The summary of statistics during this event.
   * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
   */
  @java.lang.Override
  public java.util.List<org.tracing.network.language.common.KeyIntValuePair> getSummaryList() {
    return summary_;
  }
  /**
   * <pre>
   * The summary of statistics during this event.
   * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
   */
  @java.lang.Override
  public java.util.List<? extends org.tracing.network.language.common.KeyIntValuePairOrBuilder> 
      getSummaryOrBuilderList() {
    return summary_;
  }
  /**
   * <pre>
   * The summary of statistics during this event.
   * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
   */
  @java.lang.Override
  public int getSummaryCount() {
    return summary_.size();
  }
  /**
   * <pre>
   * The summary of statistics during this event.
   * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
   */
  @java.lang.Override
  public org.tracing.network.language.common.KeyIntValuePair getSummary(int index) {
    return summary_.get(index);
  }
  /**
   * <pre>
   * The summary of statistics during this event.
   * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
   */
  @java.lang.Override
  public org.tracing.network.language.common.KeyIntValuePairOrBuilder getSummaryOrBuilder(
      int index) {
    return summary_.get(index);
  }

  public static final int TRACECONTEXT_FIELD_NUMBER = 6;
  private org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference traceContext_;
  /**
   * <pre>
   * Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
   * https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
   * </pre>
   *
   * <code>.deeptracing.v1.SpanAttachedEvent.SpanReference traceContext = 6;</code>
   * @return Whether the traceContext field is set.
   */
  @java.lang.Override
  public boolean hasTraceContext() {
    return traceContext_ != null;
  }
  /**
   * <pre>
   * Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
   * https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
   * </pre>
   *
   * <code>.deeptracing.v1.SpanAttachedEvent.SpanReference traceContext = 6;</code>
   * @return The traceContext.
   */
  @java.lang.Override
  public org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference getTraceContext() {
    return traceContext_ == null ? org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.getDefaultInstance() : traceContext_;
  }
  /**
   * <pre>
   * Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
   * https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
   * </pre>
   *
   * <code>.deeptracing.v1.SpanAttachedEvent.SpanReference traceContext = 6;</code>
   */
  @java.lang.Override
  public org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceOrBuilder getTraceContextOrBuilder() {
    return traceContext_ == null ? org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.getDefaultInstance() : traceContext_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (startTime_ != null) {
      output.writeMessage(1, getStartTime());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(event_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, event_);
    }
    if (endTime_ != null) {
      output.writeMessage(3, getEndTime());
    }
    for (int i = 0; i < tags_.size(); i++) {
      output.writeMessage(4, tags_.get(i));
    }
    for (int i = 0; i < summary_.size(); i++) {
      output.writeMessage(5, summary_.get(i));
    }
    if (traceContext_ != null) {
      output.writeMessage(6, getTraceContext());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (startTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getStartTime());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(event_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, event_);
    }
    if (endTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getEndTime());
    }
    for (int i = 0; i < tags_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, tags_.get(i));
    }
    for (int i = 0; i < summary_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, summary_.get(i));
    }
    if (traceContext_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getTraceContext());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.tracing.network.language.tracing.SpanAttachedEvent)) {
      return super.equals(obj);
    }
    org.tracing.network.language.tracing.SpanAttachedEvent other = (org.tracing.network.language.tracing.SpanAttachedEvent) obj;

    if (hasStartTime() != other.hasStartTime()) return false;
    if (hasStartTime()) {
      if (!getStartTime()
          .equals(other.getStartTime())) return false;
    }
    if (!getEvent()
        .equals(other.getEvent())) return false;
    if (hasEndTime() != other.hasEndTime()) return false;
    if (hasEndTime()) {
      if (!getEndTime()
          .equals(other.getEndTime())) return false;
    }
    if (!getTagsList()
        .equals(other.getTagsList())) return false;
    if (!getSummaryList()
        .equals(other.getSummaryList())) return false;
    if (hasTraceContext() != other.hasTraceContext()) return false;
    if (hasTraceContext()) {
      if (!getTraceContext()
          .equals(other.getTraceContext())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasStartTime()) {
      hash = (37 * hash) + STARTTIME_FIELD_NUMBER;
      hash = (53 * hash) + getStartTime().hashCode();
    }
    hash = (37 * hash) + EVENT_FIELD_NUMBER;
    hash = (53 * hash) + getEvent().hashCode();
    if (hasEndTime()) {
      hash = (37 * hash) + ENDTIME_FIELD_NUMBER;
      hash = (53 * hash) + getEndTime().hashCode();
    }
    if (getTagsCount() > 0) {
      hash = (37 * hash) + TAGS_FIELD_NUMBER;
      hash = (53 * hash) + getTagsList().hashCode();
    }
    if (getSummaryCount() > 0) {
      hash = (37 * hash) + SUMMARY_FIELD_NUMBER;
      hash = (53 * hash) + getSummaryList().hashCode();
    }
    if (hasTraceContext()) {
      hash = (37 * hash) + TRACECONTEXT_FIELD_NUMBER;
      hash = (53 * hash) + getTraceContext().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.tracing.network.language.tracing.SpanAttachedEvent parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tracing.network.language.tracing.SpanAttachedEvent parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tracing.network.language.tracing.SpanAttachedEvent parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tracing.network.language.tracing.SpanAttachedEvent parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tracing.network.language.tracing.SpanAttachedEvent parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tracing.network.language.tracing.SpanAttachedEvent parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tracing.network.language.tracing.SpanAttachedEvent parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.tracing.network.language.tracing.SpanAttachedEvent parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.tracing.network.language.tracing.SpanAttachedEvent parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.tracing.network.language.tracing.SpanAttachedEvent parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.tracing.network.language.tracing.SpanAttachedEvent parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.tracing.network.language.tracing.SpanAttachedEvent parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.tracing.network.language.tracing.SpanAttachedEvent prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * SpanAttachedEvent represents an attached event for a traced RPC.
   *
   * When an RPC is being traced by the in-process language agent, a span would be reported by the client-side agent.
   * And the rover would be aware of this RPC due to the existing tracing header.
   * Then, the rover agent collects extra information from the OS level to provide assistance information to diagnose network performance.
   * </pre>
   *
   * Protobuf type {@code deeptracing.v1.SpanAttachedEvent}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:deeptracing.v1.SpanAttachedEvent)
      org.tracing.network.language.tracing.SpanAttachedEventOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tracing.network.language.tracing.Tracing.internal_static_deeptracing_v1_SpanAttachedEvent_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tracing.network.language.tracing.Tracing.internal_static_deeptracing_v1_SpanAttachedEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tracing.network.language.tracing.SpanAttachedEvent.class, org.tracing.network.language.tracing.SpanAttachedEvent.Builder.class);
    }

    // Construct using org.tracing.network.language.tracing.SpanAttachedEvent.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      startTime_ = null;
      if (startTimeBuilder_ != null) {
        startTimeBuilder_.dispose();
        startTimeBuilder_ = null;
      }
      event_ = "";
      endTime_ = null;
      if (endTimeBuilder_ != null) {
        endTimeBuilder_.dispose();
        endTimeBuilder_ = null;
      }
      if (tagsBuilder_ == null) {
        tags_ = java.util.Collections.emptyList();
      } else {
        tags_ = null;
        tagsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      if (summaryBuilder_ == null) {
        summary_ = java.util.Collections.emptyList();
      } else {
        summary_ = null;
        summaryBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      traceContext_ = null;
      if (traceContextBuilder_ != null) {
        traceContextBuilder_.dispose();
        traceContextBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.tracing.network.language.tracing.Tracing.internal_static_deeptracing_v1_SpanAttachedEvent_descriptor;
    }

    @java.lang.Override
    public org.tracing.network.language.tracing.SpanAttachedEvent getDefaultInstanceForType() {
      return org.tracing.network.language.tracing.SpanAttachedEvent.getDefaultInstance();
    }

    @java.lang.Override
    public org.tracing.network.language.tracing.SpanAttachedEvent build() {
      org.tracing.network.language.tracing.SpanAttachedEvent result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.tracing.network.language.tracing.SpanAttachedEvent buildPartial() {
      org.tracing.network.language.tracing.SpanAttachedEvent result = new org.tracing.network.language.tracing.SpanAttachedEvent(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(org.tracing.network.language.tracing.SpanAttachedEvent result) {
      if (tagsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          tags_ = java.util.Collections.unmodifiableList(tags_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.tags_ = tags_;
      } else {
        result.tags_ = tagsBuilder_.build();
      }
      if (summaryBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          summary_ = java.util.Collections.unmodifiableList(summary_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.summary_ = summary_;
      } else {
        result.summary_ = summaryBuilder_.build();
      }
    }

    private void buildPartial0(org.tracing.network.language.tracing.SpanAttachedEvent result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.startTime_ = startTimeBuilder_ == null
            ? startTime_
            : startTimeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.event_ = event_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.endTime_ = endTimeBuilder_ == null
            ? endTime_
            : endTimeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.traceContext_ = traceContextBuilder_ == null
            ? traceContext_
            : traceContextBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.tracing.network.language.tracing.SpanAttachedEvent) {
        return mergeFrom((org.tracing.network.language.tracing.SpanAttachedEvent)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.tracing.network.language.tracing.SpanAttachedEvent other) {
      if (other == org.tracing.network.language.tracing.SpanAttachedEvent.getDefaultInstance()) return this;
      if (other.hasStartTime()) {
        mergeStartTime(other.getStartTime());
      }
      if (!other.getEvent().isEmpty()) {
        event_ = other.event_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.hasEndTime()) {
        mergeEndTime(other.getEndTime());
      }
      if (tagsBuilder_ == null) {
        if (!other.tags_.isEmpty()) {
          if (tags_.isEmpty()) {
            tags_ = other.tags_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTagsIsMutable();
            tags_.addAll(other.tags_);
          }
          onChanged();
        }
      } else {
        if (!other.tags_.isEmpty()) {
          if (tagsBuilder_.isEmpty()) {
            tagsBuilder_.dispose();
            tagsBuilder_ = null;
            tags_ = other.tags_;
            bitField0_ = (bitField0_ & ~0x00000008);
            tagsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getTagsFieldBuilder() : null;
          } else {
            tagsBuilder_.addAllMessages(other.tags_);
          }
        }
      }
      if (summaryBuilder_ == null) {
        if (!other.summary_.isEmpty()) {
          if (summary_.isEmpty()) {
            summary_ = other.summary_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureSummaryIsMutable();
            summary_.addAll(other.summary_);
          }
          onChanged();
        }
      } else {
        if (!other.summary_.isEmpty()) {
          if (summaryBuilder_.isEmpty()) {
            summaryBuilder_.dispose();
            summaryBuilder_ = null;
            summary_ = other.summary_;
            bitField0_ = (bitField0_ & ~0x00000010);
            summaryBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSummaryFieldBuilder() : null;
          } else {
            summaryBuilder_.addAllMessages(other.summary_);
          }
        }
      }
      if (other.hasTraceContext()) {
        mergeTraceContext(other.getTraceContext());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getStartTimeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              event_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getEndTimeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              org.tracing.network.language.common.KeyStringValuePair m =
                  input.readMessage(
                      org.tracing.network.language.common.KeyStringValuePair.parser(),
                      extensionRegistry);
              if (tagsBuilder_ == null) {
                ensureTagsIsMutable();
                tags_.add(m);
              } else {
                tagsBuilder_.addMessage(m);
              }
              break;
            } // case 34
            case 42: {
              org.tracing.network.language.common.KeyIntValuePair m =
                  input.readMessage(
                      org.tracing.network.language.common.KeyIntValuePair.parser(),
                      extensionRegistry);
              if (summaryBuilder_ == null) {
                ensureSummaryIsMutable();
                summary_.add(m);
              } else {
                summaryBuilder_.addMessage(m);
              }
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getTraceContextFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.tracing.network.language.common.Instant startTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tracing.network.language.common.Instant, org.tracing.network.language.common.Instant.Builder, org.tracing.network.language.common.InstantOrBuilder> startTimeBuilder_;
    /**
     * <pre>
     * The nanosecond timestamp of the event's start time.
     * Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
     * Because the attached event happens in the OS syscall level, most of them are executed rapidly.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant startTime = 1;</code>
     * @return Whether the startTime field is set.
     */
    public boolean hasStartTime() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The nanosecond timestamp of the event's start time.
     * Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
     * Because the attached event happens in the OS syscall level, most of them are executed rapidly.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant startTime = 1;</code>
     * @return The startTime.
     */
    public org.tracing.network.language.common.Instant getStartTime() {
      if (startTimeBuilder_ == null) {
        return startTime_ == null ? org.tracing.network.language.common.Instant.getDefaultInstance() : startTime_;
      } else {
        return startTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The nanosecond timestamp of the event's start time.
     * Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
     * Because the attached event happens in the OS syscall level, most of them are executed rapidly.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant startTime = 1;</code>
     */
    public Builder setStartTime(org.tracing.network.language.common.Instant value) {
      if (startTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        startTime_ = value;
      } else {
        startTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The nanosecond timestamp of the event's start time.
     * Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
     * Because the attached event happens in the OS syscall level, most of them are executed rapidly.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant startTime = 1;</code>
     */
    public Builder setStartTime(
        org.tracing.network.language.common.Instant.Builder builderForValue) {
      if (startTimeBuilder_ == null) {
        startTime_ = builderForValue.build();
      } else {
        startTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The nanosecond timestamp of the event's start time.
     * Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
     * Because the attached event happens in the OS syscall level, most of them are executed rapidly.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant startTime = 1;</code>
     */
    public Builder mergeStartTime(org.tracing.network.language.common.Instant value) {
      if (startTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          startTime_ != null &&
          startTime_ != org.tracing.network.language.common.Instant.getDefaultInstance()) {
          getStartTimeBuilder().mergeFrom(value);
        } else {
          startTime_ = value;
        }
      } else {
        startTimeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The nanosecond timestamp of the event's start time.
     * Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
     * Because the attached event happens in the OS syscall level, most of them are executed rapidly.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant startTime = 1;</code>
     */
    public Builder clearStartTime() {
      bitField0_ = (bitField0_ & ~0x00000001);
      startTime_ = null;
      if (startTimeBuilder_ != null) {
        startTimeBuilder_.dispose();
        startTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The nanosecond timestamp of the event's start time.
     * Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
     * Because the attached event happens in the OS syscall level, most of them are executed rapidly.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant startTime = 1;</code>
     */
    public org.tracing.network.language.common.Instant.Builder getStartTimeBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getStartTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The nanosecond timestamp of the event's start time.
     * Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
     * Because the attached event happens in the OS syscall level, most of them are executed rapidly.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant startTime = 1;</code>
     */
    public org.tracing.network.language.common.InstantOrBuilder getStartTimeOrBuilder() {
      if (startTimeBuilder_ != null) {
        return startTimeBuilder_.getMessageOrBuilder();
      } else {
        return startTime_ == null ?
            org.tracing.network.language.common.Instant.getDefaultInstance() : startTime_;
      }
    }
    /**
     * <pre>
     * The nanosecond timestamp of the event's start time.
     * Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
     * Because the attached event happens in the OS syscall level, most of them are executed rapidly.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant startTime = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tracing.network.language.common.Instant, org.tracing.network.language.common.Instant.Builder, org.tracing.network.language.common.InstantOrBuilder> 
        getStartTimeFieldBuilder() {
      if (startTimeBuilder_ == null) {
        startTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.tracing.network.language.common.Instant, org.tracing.network.language.common.Instant.Builder, org.tracing.network.language.common.InstantOrBuilder>(
                getStartTime(),
                getParentForChildren(),
                isClean());
        startTime_ = null;
      }
      return startTimeBuilder_;
    }

    private java.lang.Object event_ = "";
    /**
     * <pre>
     * The official event name.
     * For example, the event name is a method signature from syscall stack.
     * </pre>
     *
     * <code>string event = 2;</code>
     * @return The event.
     */
    public java.lang.String getEvent() {
      java.lang.Object ref = event_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        event_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The official event name.
     * For example, the event name is a method signature from syscall stack.
     * </pre>
     *
     * <code>string event = 2;</code>
     * @return The bytes for event.
     */
    public com.google.protobuf.ByteString
        getEventBytes() {
      java.lang.Object ref = event_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        event_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The official event name.
     * For example, the event name is a method signature from syscall stack.
     * </pre>
     *
     * <code>string event = 2;</code>
     * @param value The event to set.
     * @return This builder for chaining.
     */
    public Builder setEvent(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      event_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The official event name.
     * For example, the event name is a method signature from syscall stack.
     * </pre>
     *
     * <code>string event = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearEvent() {
      event_ = getDefaultInstance().getEvent();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The official event name.
     * For example, the event name is a method signature from syscall stack.
     * </pre>
     *
     * <code>string event = 2;</code>
     * @param value The bytes for event to set.
     * @return This builder for chaining.
     */
    public Builder setEventBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      event_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private org.tracing.network.language.common.Instant endTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tracing.network.language.common.Instant, org.tracing.network.language.common.Instant.Builder, org.tracing.network.language.common.InstantOrBuilder> endTimeBuilder_;
    /**
     * <pre>
     * [Optional] The nanosecond timestamp of the event's end time.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant endTime = 3;</code>
     * @return Whether the endTime field is set.
     */
    public boolean hasEndTime() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * [Optional] The nanosecond timestamp of the event's end time.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant endTime = 3;</code>
     * @return The endTime.
     */
    public org.tracing.network.language.common.Instant getEndTime() {
      if (endTimeBuilder_ == null) {
        return endTime_ == null ? org.tracing.network.language.common.Instant.getDefaultInstance() : endTime_;
      } else {
        return endTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * [Optional] The nanosecond timestamp of the event's end time.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant endTime = 3;</code>
     */
    public Builder setEndTime(org.tracing.network.language.common.Instant value) {
      if (endTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        endTime_ = value;
      } else {
        endTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Optional] The nanosecond timestamp of the event's end time.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant endTime = 3;</code>
     */
    public Builder setEndTime(
        org.tracing.network.language.common.Instant.Builder builderForValue) {
      if (endTimeBuilder_ == null) {
        endTime_ = builderForValue.build();
      } else {
        endTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Optional] The nanosecond timestamp of the event's end time.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant endTime = 3;</code>
     */
    public Builder mergeEndTime(org.tracing.network.language.common.Instant value) {
      if (endTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          endTime_ != null &&
          endTime_ != org.tracing.network.language.common.Instant.getDefaultInstance()) {
          getEndTimeBuilder().mergeFrom(value);
        } else {
          endTime_ = value;
        }
      } else {
        endTimeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Optional] The nanosecond timestamp of the event's end time.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant endTime = 3;</code>
     */
    public Builder clearEndTime() {
      bitField0_ = (bitField0_ & ~0x00000004);
      endTime_ = null;
      if (endTimeBuilder_ != null) {
        endTimeBuilder_.dispose();
        endTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Optional] The nanosecond timestamp of the event's end time.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant endTime = 3;</code>
     */
    public org.tracing.network.language.common.Instant.Builder getEndTimeBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getEndTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * [Optional] The nanosecond timestamp of the event's end time.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant endTime = 3;</code>
     */
    public org.tracing.network.language.common.InstantOrBuilder getEndTimeOrBuilder() {
      if (endTimeBuilder_ != null) {
        return endTimeBuilder_.getMessageOrBuilder();
      } else {
        return endTime_ == null ?
            org.tracing.network.language.common.Instant.getDefaultInstance() : endTime_;
      }
    }
    /**
     * <pre>
     * [Optional] The nanosecond timestamp of the event's end time.
     * </pre>
     *
     * <code>.deeptracing.v1.Instant endTime = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tracing.network.language.common.Instant, org.tracing.network.language.common.Instant.Builder, org.tracing.network.language.common.InstantOrBuilder> 
        getEndTimeFieldBuilder() {
      if (endTimeBuilder_ == null) {
        endTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.tracing.network.language.common.Instant, org.tracing.network.language.common.Instant.Builder, org.tracing.network.language.common.InstantOrBuilder>(
                getEndTime(),
                getParentForChildren(),
                isClean());
        endTime_ = null;
      }
      return endTimeBuilder_;
    }

    private java.util.List<org.tracing.network.language.common.KeyStringValuePair> tags_ =
      java.util.Collections.emptyList();
    private void ensureTagsIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        tags_ = new java.util.ArrayList<org.tracing.network.language.common.KeyStringValuePair>(tags_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.tracing.network.language.common.KeyStringValuePair, org.tracing.network.language.common.KeyStringValuePair.Builder, org.tracing.network.language.common.KeyStringValuePairOrBuilder> tagsBuilder_;

    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public java.util.List<org.tracing.network.language.common.KeyStringValuePair> getTagsList() {
      if (tagsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(tags_);
      } else {
        return tagsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public int getTagsCount() {
      if (tagsBuilder_ == null) {
        return tags_.size();
      } else {
        return tagsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public org.tracing.network.language.common.KeyStringValuePair getTags(int index) {
      if (tagsBuilder_ == null) {
        return tags_.get(index);
      } else {
        return tagsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public Builder setTags(
        int index, org.tracing.network.language.common.KeyStringValuePair value) {
      if (tagsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTagsIsMutable();
        tags_.set(index, value);
        onChanged();
      } else {
        tagsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public Builder setTags(
        int index, org.tracing.network.language.common.KeyStringValuePair.Builder builderForValue) {
      if (tagsBuilder_ == null) {
        ensureTagsIsMutable();
        tags_.set(index, builderForValue.build());
        onChanged();
      } else {
        tagsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public Builder addTags(org.tracing.network.language.common.KeyStringValuePair value) {
      if (tagsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTagsIsMutable();
        tags_.add(value);
        onChanged();
      } else {
        tagsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public Builder addTags(
        int index, org.tracing.network.language.common.KeyStringValuePair value) {
      if (tagsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTagsIsMutable();
        tags_.add(index, value);
        onChanged();
      } else {
        tagsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public Builder addTags(
        org.tracing.network.language.common.KeyStringValuePair.Builder builderForValue) {
      if (tagsBuilder_ == null) {
        ensureTagsIsMutable();
        tags_.add(builderForValue.build());
        onChanged();
      } else {
        tagsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public Builder addTags(
        int index, org.tracing.network.language.common.KeyStringValuePair.Builder builderForValue) {
      if (tagsBuilder_ == null) {
        ensureTagsIsMutable();
        tags_.add(index, builderForValue.build());
        onChanged();
      } else {
        tagsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public Builder addAllTags(
        java.lang.Iterable<? extends org.tracing.network.language.common.KeyStringValuePair> values) {
      if (tagsBuilder_ == null) {
        ensureTagsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tags_);
        onChanged();
      } else {
        tagsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public Builder clearTags() {
      if (tagsBuilder_ == null) {
        tags_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        tagsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public Builder removeTags(int index) {
      if (tagsBuilder_ == null) {
        ensureTagsIsMutable();
        tags_.remove(index);
        onChanged();
      } else {
        tagsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public org.tracing.network.language.common.KeyStringValuePair.Builder getTagsBuilder(
        int index) {
      return getTagsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public org.tracing.network.language.common.KeyStringValuePairOrBuilder getTagsOrBuilder(
        int index) {
      if (tagsBuilder_ == null) {
        return tags_.get(index);  } else {
        return tagsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public java.util.List<? extends org.tracing.network.language.common.KeyStringValuePairOrBuilder> 
         getTagsOrBuilderList() {
      if (tagsBuilder_ != null) {
        return tagsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(tags_);
      }
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public org.tracing.network.language.common.KeyStringValuePair.Builder addTagsBuilder() {
      return getTagsFieldBuilder().addBuilder(
          org.tracing.network.language.common.KeyStringValuePair.getDefaultInstance());
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public org.tracing.network.language.common.KeyStringValuePair.Builder addTagsBuilder(
        int index) {
      return getTagsFieldBuilder().addBuilder(
          index, org.tracing.network.language.common.KeyStringValuePair.getDefaultInstance());
    }
    /**
     * <pre>
     * The tags for this event includes some extra OS level information,
     * such as
     * 1. net_device used for this exit span.
     * 2. network L7 protocol
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair tags = 4;</code>
     */
    public java.util.List<org.tracing.network.language.common.KeyStringValuePair.Builder> 
         getTagsBuilderList() {
      return getTagsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.tracing.network.language.common.KeyStringValuePair, org.tracing.network.language.common.KeyStringValuePair.Builder, org.tracing.network.language.common.KeyStringValuePairOrBuilder> 
        getTagsFieldBuilder() {
      if (tagsBuilder_ == null) {
        tagsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.tracing.network.language.common.KeyStringValuePair, org.tracing.network.language.common.KeyStringValuePair.Builder, org.tracing.network.language.common.KeyStringValuePairOrBuilder>(
                tags_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        tags_ = null;
      }
      return tagsBuilder_;
    }

    private java.util.List<org.tracing.network.language.common.KeyIntValuePair> summary_ =
      java.util.Collections.emptyList();
    private void ensureSummaryIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        summary_ = new java.util.ArrayList<org.tracing.network.language.common.KeyIntValuePair>(summary_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.tracing.network.language.common.KeyIntValuePair, org.tracing.network.language.common.KeyIntValuePair.Builder, org.tracing.network.language.common.KeyIntValuePairOrBuilder> summaryBuilder_;

    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public java.util.List<org.tracing.network.language.common.KeyIntValuePair> getSummaryList() {
      if (summaryBuilder_ == null) {
        return java.util.Collections.unmodifiableList(summary_);
      } else {
        return summaryBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public int getSummaryCount() {
      if (summaryBuilder_ == null) {
        return summary_.size();
      } else {
        return summaryBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public org.tracing.network.language.common.KeyIntValuePair getSummary(int index) {
      if (summaryBuilder_ == null) {
        return summary_.get(index);
      } else {
        return summaryBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public Builder setSummary(
        int index, org.tracing.network.language.common.KeyIntValuePair value) {
      if (summaryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSummaryIsMutable();
        summary_.set(index, value);
        onChanged();
      } else {
        summaryBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public Builder setSummary(
        int index, org.tracing.network.language.common.KeyIntValuePair.Builder builderForValue) {
      if (summaryBuilder_ == null) {
        ensureSummaryIsMutable();
        summary_.set(index, builderForValue.build());
        onChanged();
      } else {
        summaryBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public Builder addSummary(org.tracing.network.language.common.KeyIntValuePair value) {
      if (summaryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSummaryIsMutable();
        summary_.add(value);
        onChanged();
      } else {
        summaryBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public Builder addSummary(
        int index, org.tracing.network.language.common.KeyIntValuePair value) {
      if (summaryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSummaryIsMutable();
        summary_.add(index, value);
        onChanged();
      } else {
        summaryBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public Builder addSummary(
        org.tracing.network.language.common.KeyIntValuePair.Builder builderForValue) {
      if (summaryBuilder_ == null) {
        ensureSummaryIsMutable();
        summary_.add(builderForValue.build());
        onChanged();
      } else {
        summaryBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public Builder addSummary(
        int index, org.tracing.network.language.common.KeyIntValuePair.Builder builderForValue) {
      if (summaryBuilder_ == null) {
        ensureSummaryIsMutable();
        summary_.add(index, builderForValue.build());
        onChanged();
      } else {
        summaryBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public Builder addAllSummary(
        java.lang.Iterable<? extends org.tracing.network.language.common.KeyIntValuePair> values) {
      if (summaryBuilder_ == null) {
        ensureSummaryIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, summary_);
        onChanged();
      } else {
        summaryBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public Builder clearSummary() {
      if (summaryBuilder_ == null) {
        summary_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        summaryBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public Builder removeSummary(int index) {
      if (summaryBuilder_ == null) {
        ensureSummaryIsMutable();
        summary_.remove(index);
        onChanged();
      } else {
        summaryBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public org.tracing.network.language.common.KeyIntValuePair.Builder getSummaryBuilder(
        int index) {
      return getSummaryFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public org.tracing.network.language.common.KeyIntValuePairOrBuilder getSummaryOrBuilder(
        int index) {
      if (summaryBuilder_ == null) {
        return summary_.get(index);  } else {
        return summaryBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public java.util.List<? extends org.tracing.network.language.common.KeyIntValuePairOrBuilder> 
         getSummaryOrBuilderList() {
      if (summaryBuilder_ != null) {
        return summaryBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(summary_);
      }
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public org.tracing.network.language.common.KeyIntValuePair.Builder addSummaryBuilder() {
      return getSummaryFieldBuilder().addBuilder(
          org.tracing.network.language.common.KeyIntValuePair.getDefaultInstance());
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public org.tracing.network.language.common.KeyIntValuePair.Builder addSummaryBuilder(
        int index) {
      return getSummaryFieldBuilder().addBuilder(
          index, org.tracing.network.language.common.KeyIntValuePair.getDefaultInstance());
    }
    /**
     * <pre>
     * The summary of statistics during this event.
     * Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyIntValuePair summary = 5;</code>
     */
    public java.util.List<org.tracing.network.language.common.KeyIntValuePair.Builder> 
         getSummaryBuilderList() {
      return getSummaryFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.tracing.network.language.common.KeyIntValuePair, org.tracing.network.language.common.KeyIntValuePair.Builder, org.tracing.network.language.common.KeyIntValuePairOrBuilder> 
        getSummaryFieldBuilder() {
      if (summaryBuilder_ == null) {
        summaryBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.tracing.network.language.common.KeyIntValuePair, org.tracing.network.language.common.KeyIntValuePair.Builder, org.tracing.network.language.common.KeyIntValuePairOrBuilder>(
                summary_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        summary_ = null;
      }
      return summaryBuilder_;
    }

    private org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference traceContext_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference, org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.Builder, org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceOrBuilder> traceContextBuilder_;
    /**
     * <pre>
     * Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
     * https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
     * </pre>
     *
     * <code>.deeptracing.v1.SpanAttachedEvent.SpanReference traceContext = 6;</code>
     * @return Whether the traceContext field is set.
     */
    public boolean hasTraceContext() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
     * https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
     * </pre>
     *
     * <code>.deeptracing.v1.SpanAttachedEvent.SpanReference traceContext = 6;</code>
     * @return The traceContext.
     */
    public org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference getTraceContext() {
      if (traceContextBuilder_ == null) {
        return traceContext_ == null ? org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.getDefaultInstance() : traceContext_;
      } else {
        return traceContextBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
     * https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
     * </pre>
     *
     * <code>.deeptracing.v1.SpanAttachedEvent.SpanReference traceContext = 6;</code>
     */
    public Builder setTraceContext(org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference value) {
      if (traceContextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        traceContext_ = value;
      } else {
        traceContextBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
     * https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
     * </pre>
     *
     * <code>.deeptracing.v1.SpanAttachedEvent.SpanReference traceContext = 6;</code>
     */
    public Builder setTraceContext(
        org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.Builder builderForValue) {
      if (traceContextBuilder_ == null) {
        traceContext_ = builderForValue.build();
      } else {
        traceContextBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
     * https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
     * </pre>
     *
     * <code>.deeptracing.v1.SpanAttachedEvent.SpanReference traceContext = 6;</code>
     */
    public Builder mergeTraceContext(org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference value) {
      if (traceContextBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          traceContext_ != null &&
          traceContext_ != org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.getDefaultInstance()) {
          getTraceContextBuilder().mergeFrom(value);
        } else {
          traceContext_ = value;
        }
      } else {
        traceContextBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
     * https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
     * </pre>
     *
     * <code>.deeptracing.v1.SpanAttachedEvent.SpanReference traceContext = 6;</code>
     */
    public Builder clearTraceContext() {
      bitField0_ = (bitField0_ & ~0x00000020);
      traceContext_ = null;
      if (traceContextBuilder_ != null) {
        traceContextBuilder_.dispose();
        traceContextBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
     * https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
     * </pre>
     *
     * <code>.deeptracing.v1.SpanAttachedEvent.SpanReference traceContext = 6;</code>
     */
    public org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.Builder getTraceContextBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getTraceContextFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
     * https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
     * </pre>
     *
     * <code>.deeptracing.v1.SpanAttachedEvent.SpanReference traceContext = 6;</code>
     */
    public org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceOrBuilder getTraceContextOrBuilder() {
      if (traceContextBuilder_ != null) {
        return traceContextBuilder_.getMessageOrBuilder();
      } else {
        return traceContext_ == null ?
            org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.getDefaultInstance() : traceContext_;
      }
    }
    /**
     * <pre>
     * Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
     * https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
     * </pre>
     *
     * <code>.deeptracing.v1.SpanAttachedEvent.SpanReference traceContext = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference, org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.Builder, org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceOrBuilder> 
        getTraceContextFieldBuilder() {
      if (traceContextBuilder_ == null) {
        traceContextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference, org.tracing.network.language.tracing.SpanAttachedEvent.SpanReference.Builder, org.tracing.network.language.tracing.SpanAttachedEvent.SpanReferenceOrBuilder>(
                getTraceContext(),
                getParentForChildren(),
                isClean());
        traceContext_ = null;
      }
      return traceContextBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:deeptracing.v1.SpanAttachedEvent)
  }

  // @@protoc_insertion_point(class_scope:deeptracing.v1.SpanAttachedEvent)
  private static final org.tracing.network.language.tracing.SpanAttachedEvent DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.tracing.network.language.tracing.SpanAttachedEvent();
  }

  public static org.tracing.network.language.tracing.SpanAttachedEvent getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SpanAttachedEvent>
      PARSER = new com.google.protobuf.AbstractParser<SpanAttachedEvent>() {
    @java.lang.Override
    public SpanAttachedEvent parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<SpanAttachedEvent> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SpanAttachedEvent> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.tracing.network.language.tracing.SpanAttachedEvent getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

