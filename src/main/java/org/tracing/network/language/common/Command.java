// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Command.proto

package org.tracing.network.language.common;

/**
 * <pre>
 * Command represents an protocol customized data when return.
 *
 * When the agent communicates with the OAP side using gRPC, the OAP uses Command to return the data content to the Agent.
 *
 * The available commands are,
 * Name: ConfigurationDiscoveryCommand
 * Args:
 *     SerialNumber: String
 *     UUID: String
 *     properties: Key-value pairs rely on agent-side implementations
 *
 * Ref, Java agent supported configurations, https://skywalking.apache.org/docs/skywalking-java/next/en/setup/service-agent/java-agent/configuration-discovery/
 *
 * Name: ProfileTaskQuery
 * Args:
 *     SerialNumber: String
 *     TaskId: String
 *     EndpointName: String
 *     Duration: Integer
 *     MinDurationThreshold: Integer
 *     DumpPeriod: Integer
 *     MaxSamplingCount: Integer
 *     StartTime: Date Timestamp
 *     CreateTime: Date Timestamp
 *
 * Name: EBPFProfilingTaskQuery
 * Args:
 *     TaskId: String
 *     ProcessId: Integer List
 *     TaskUpdateTime: Date timestamp
 *     TriggerType: Enum, value = FIXED_TIME
 *     TargetType: Enum, value = ON_CPU, OFF_CPU or NETWORK
 *     TaskStartTime: Date Timestamp
 *     ExtensionConfigJSON: JSON serialization of NetworkSamplings.
 *         --- NetworkSamplings ---
 *         NetworkSamplings: List
 *             URIRegex: String
 *             MinDuration: Integer
 *             When4xx: Boolean
 *             When5xx: Boolean
 *             Settings: Object
 *                 RequireCompleteRequest: Boolean
 *                 MaxRequestSize: Integer
 *                 RequireCompleteResponse: Boolean
 *                 MaxResponseSize: Integer
 *         ------------------------
 *     FixedTriggerDuration: Long
 *
 * Name: ContinuousProfilingPolicyQuery
 * Args:
 *     ServiceWithPolicyJSON: List JSON serialization of ServiceWithPolicy.
 *         --- ServiceWithPolicy ---
 *         ServiceName: String
 *         UUID: String
 *         Profiling: Multiple profiling configuration. Map
 *             Key: Profiling type. Enum, value = ON_CPU, OFF_CPU, NETWORK
 *             Value: Profiling policies. Map
 *                 Key: Monitoring type. Enum, value = PROCESS_CPU, PROCESS_THREAD_COUNT, SYSTEM_LOAD, HTTP_ERROR_RATE, HTTP_AVG_RESPONSE_TIME
 *                 Value: Policy configuration. Object.
 *                     Threshold: String
 *                     Period(s): Integer
 *                     Count: Integer
 *                     URIList: List&lt;String&gt;
 *                     URIRegex: String
 *         ---------------------------
 *
 * Name: ContinuousProfilingReportTask
 * Args:
 *     TaskId: String
 * </pre>
 *
 * Protobuf type {@code deeptracing.v1.Command}
 */
public final class Command extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:deeptracing.v1.Command)
    CommandOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Command.newBuilder() to construct.
  private Command(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Command() {
    command_ = "";
    args_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Command();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.tracing.network.language.common.CommandOuterClass.internal_static_deeptracing_v1_Command_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.tracing.network.language.common.CommandOuterClass.internal_static_deeptracing_v1_Command_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.tracing.network.language.common.Command.class, org.tracing.network.language.common.Command.Builder.class);
  }

  public static final int COMMAND_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object command_ = "";
  /**
   * <pre>
   * Use command name to distinguish different data type.
   * </pre>
   *
   * <code>string command = 1;</code>
   * @return The command.
   */
  @java.lang.Override
  public java.lang.String getCommand() {
    java.lang.Object ref = command_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      command_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Use command name to distinguish different data type.
   * </pre>
   *
   * <code>string command = 1;</code>
   * @return The bytes for command.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCommandBytes() {
    java.lang.Object ref = command_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      command_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ARGS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<org.tracing.network.language.common.KeyStringValuePair> args_;
  /**
   * <pre>
   * Data content in command.
   * The value of content needs to be serialized as string for transmission.
   *
   * Basic data type: convert as string.
   * The list of basic data: multiple data are split by ",".
   * Complex data: serialize string through json.
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
   */
  @java.lang.Override
  public java.util.List<org.tracing.network.language.common.KeyStringValuePair> getArgsList() {
    return args_;
  }
  /**
   * <pre>
   * Data content in command.
   * The value of content needs to be serialized as string for transmission.
   *
   * Basic data type: convert as string.
   * The list of basic data: multiple data are split by ",".
   * Complex data: serialize string through json.
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends org.tracing.network.language.common.KeyStringValuePairOrBuilder> 
      getArgsOrBuilderList() {
    return args_;
  }
  /**
   * <pre>
   * Data content in command.
   * The value of content needs to be serialized as string for transmission.
   *
   * Basic data type: convert as string.
   * The list of basic data: multiple data are split by ",".
   * Complex data: serialize string through json.
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
   */
  @java.lang.Override
  public int getArgsCount() {
    return args_.size();
  }
  /**
   * <pre>
   * Data content in command.
   * The value of content needs to be serialized as string for transmission.
   *
   * Basic data type: convert as string.
   * The list of basic data: multiple data are split by ",".
   * Complex data: serialize string through json.
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
   */
  @java.lang.Override
  public org.tracing.network.language.common.KeyStringValuePair getArgs(int index) {
    return args_.get(index);
  }
  /**
   * <pre>
   * Data content in command.
   * The value of content needs to be serialized as string for transmission.
   *
   * Basic data type: convert as string.
   * The list of basic data: multiple data are split by ",".
   * Complex data: serialize string through json.
   * </pre>
   *
   * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
   */
  @java.lang.Override
  public org.tracing.network.language.common.KeyStringValuePairOrBuilder getArgsOrBuilder(
      int index) {
    return args_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(command_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, command_);
    }
    for (int i = 0; i < args_.size(); i++) {
      output.writeMessage(2, args_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(command_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, command_);
    }
    for (int i = 0; i < args_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, args_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.tracing.network.language.common.Command)) {
      return super.equals(obj);
    }
    org.tracing.network.language.common.Command other = (org.tracing.network.language.common.Command) obj;

    if (!getCommand()
        .equals(other.getCommand())) return false;
    if (!getArgsList()
        .equals(other.getArgsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + COMMAND_FIELD_NUMBER;
    hash = (53 * hash) + getCommand().hashCode();
    if (getArgsCount() > 0) {
      hash = (37 * hash) + ARGS_FIELD_NUMBER;
      hash = (53 * hash) + getArgsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.tracing.network.language.common.Command parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tracing.network.language.common.Command parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tracing.network.language.common.Command parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tracing.network.language.common.Command parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tracing.network.language.common.Command parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tracing.network.language.common.Command parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tracing.network.language.common.Command parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.tracing.network.language.common.Command parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.tracing.network.language.common.Command parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.tracing.network.language.common.Command parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.tracing.network.language.common.Command parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.tracing.network.language.common.Command parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.tracing.network.language.common.Command prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Command represents an protocol customized data when return.
   *
   * When the agent communicates with the OAP side using gRPC, the OAP uses Command to return the data content to the Agent.
   *
   * The available commands are,
   * Name: ConfigurationDiscoveryCommand
   * Args:
   *     SerialNumber: String
   *     UUID: String
   *     properties: Key-value pairs rely on agent-side implementations
   *
   * Ref, Java agent supported configurations, https://skywalking.apache.org/docs/skywalking-java/next/en/setup/service-agent/java-agent/configuration-discovery/
   *
   * Name: ProfileTaskQuery
   * Args:
   *     SerialNumber: String
   *     TaskId: String
   *     EndpointName: String
   *     Duration: Integer
   *     MinDurationThreshold: Integer
   *     DumpPeriod: Integer
   *     MaxSamplingCount: Integer
   *     StartTime: Date Timestamp
   *     CreateTime: Date Timestamp
   *
   * Name: EBPFProfilingTaskQuery
   * Args:
   *     TaskId: String
   *     ProcessId: Integer List
   *     TaskUpdateTime: Date timestamp
   *     TriggerType: Enum, value = FIXED_TIME
   *     TargetType: Enum, value = ON_CPU, OFF_CPU or NETWORK
   *     TaskStartTime: Date Timestamp
   *     ExtensionConfigJSON: JSON serialization of NetworkSamplings.
   *         --- NetworkSamplings ---
   *         NetworkSamplings: List
   *             URIRegex: String
   *             MinDuration: Integer
   *             When4xx: Boolean
   *             When5xx: Boolean
   *             Settings: Object
   *                 RequireCompleteRequest: Boolean
   *                 MaxRequestSize: Integer
   *                 RequireCompleteResponse: Boolean
   *                 MaxResponseSize: Integer
   *         ------------------------
   *     FixedTriggerDuration: Long
   *
   * Name: ContinuousProfilingPolicyQuery
   * Args:
   *     ServiceWithPolicyJSON: List JSON serialization of ServiceWithPolicy.
   *         --- ServiceWithPolicy ---
   *         ServiceName: String
   *         UUID: String
   *         Profiling: Multiple profiling configuration. Map
   *             Key: Profiling type. Enum, value = ON_CPU, OFF_CPU, NETWORK
   *             Value: Profiling policies. Map
   *                 Key: Monitoring type. Enum, value = PROCESS_CPU, PROCESS_THREAD_COUNT, SYSTEM_LOAD, HTTP_ERROR_RATE, HTTP_AVG_RESPONSE_TIME
   *                 Value: Policy configuration. Object.
   *                     Threshold: String
   *                     Period(s): Integer
   *                     Count: Integer
   *                     URIList: List&lt;String&gt;
   *                     URIRegex: String
   *         ---------------------------
   *
   * Name: ContinuousProfilingReportTask
   * Args:
   *     TaskId: String
   * </pre>
   *
   * Protobuf type {@code deeptracing.v1.Command}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:deeptracing.v1.Command)
      org.tracing.network.language.common.CommandOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tracing.network.language.common.CommandOuterClass.internal_static_deeptracing_v1_Command_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tracing.network.language.common.CommandOuterClass.internal_static_deeptracing_v1_Command_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tracing.network.language.common.Command.class, org.tracing.network.language.common.Command.Builder.class);
    }

    // Construct using org.tracing.network.language.common.Command.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      command_ = "";
      if (argsBuilder_ == null) {
        args_ = java.util.Collections.emptyList();
      } else {
        args_ = null;
        argsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.tracing.network.language.common.CommandOuterClass.internal_static_deeptracing_v1_Command_descriptor;
    }

    @java.lang.Override
    public org.tracing.network.language.common.Command getDefaultInstanceForType() {
      return org.tracing.network.language.common.Command.getDefaultInstance();
    }

    @java.lang.Override
    public org.tracing.network.language.common.Command build() {
      org.tracing.network.language.common.Command result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.tracing.network.language.common.Command buildPartial() {
      org.tracing.network.language.common.Command result = new org.tracing.network.language.common.Command(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(org.tracing.network.language.common.Command result) {
      if (argsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          args_ = java.util.Collections.unmodifiableList(args_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.args_ = args_;
      } else {
        result.args_ = argsBuilder_.build();
      }
    }

    private void buildPartial0(org.tracing.network.language.common.Command result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.command_ = command_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.tracing.network.language.common.Command) {
        return mergeFrom((org.tracing.network.language.common.Command)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.tracing.network.language.common.Command other) {
      if (other == org.tracing.network.language.common.Command.getDefaultInstance()) return this;
      if (!other.getCommand().isEmpty()) {
        command_ = other.command_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (argsBuilder_ == null) {
        if (!other.args_.isEmpty()) {
          if (args_.isEmpty()) {
            args_ = other.args_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureArgsIsMutable();
            args_.addAll(other.args_);
          }
          onChanged();
        }
      } else {
        if (!other.args_.isEmpty()) {
          if (argsBuilder_.isEmpty()) {
            argsBuilder_.dispose();
            argsBuilder_ = null;
            args_ = other.args_;
            bitField0_ = (bitField0_ & ~0x00000002);
            argsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getArgsFieldBuilder() : null;
          } else {
            argsBuilder_.addAllMessages(other.args_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              command_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              org.tracing.network.language.common.KeyStringValuePair m =
                  input.readMessage(
                      org.tracing.network.language.common.KeyStringValuePair.parser(),
                      extensionRegistry);
              if (argsBuilder_ == null) {
                ensureArgsIsMutable();
                args_.add(m);
              } else {
                argsBuilder_.addMessage(m);
              }
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object command_ = "";
    /**
     * <pre>
     * Use command name to distinguish different data type.
     * </pre>
     *
     * <code>string command = 1;</code>
     * @return The command.
     */
    public java.lang.String getCommand() {
      java.lang.Object ref = command_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        command_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Use command name to distinguish different data type.
     * </pre>
     *
     * <code>string command = 1;</code>
     * @return The bytes for command.
     */
    public com.google.protobuf.ByteString
        getCommandBytes() {
      java.lang.Object ref = command_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        command_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Use command name to distinguish different data type.
     * </pre>
     *
     * <code>string command = 1;</code>
     * @param value The command to set.
     * @return This builder for chaining.
     */
    public Builder setCommand(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      command_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Use command name to distinguish different data type.
     * </pre>
     *
     * <code>string command = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearCommand() {
      command_ = getDefaultInstance().getCommand();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Use command name to distinguish different data type.
     * </pre>
     *
     * <code>string command = 1;</code>
     * @param value The bytes for command to set.
     * @return This builder for chaining.
     */
    public Builder setCommandBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      command_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.util.List<org.tracing.network.language.common.KeyStringValuePair> args_ =
      java.util.Collections.emptyList();
    private void ensureArgsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        args_ = new java.util.ArrayList<org.tracing.network.language.common.KeyStringValuePair>(args_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.tracing.network.language.common.KeyStringValuePair, org.tracing.network.language.common.KeyStringValuePair.Builder, org.tracing.network.language.common.KeyStringValuePairOrBuilder> argsBuilder_;

    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public java.util.List<org.tracing.network.language.common.KeyStringValuePair> getArgsList() {
      if (argsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(args_);
      } else {
        return argsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public int getArgsCount() {
      if (argsBuilder_ == null) {
        return args_.size();
      } else {
        return argsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public org.tracing.network.language.common.KeyStringValuePair getArgs(int index) {
      if (argsBuilder_ == null) {
        return args_.get(index);
      } else {
        return argsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public Builder setArgs(
        int index, org.tracing.network.language.common.KeyStringValuePair value) {
      if (argsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArgsIsMutable();
        args_.set(index, value);
        onChanged();
      } else {
        argsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public Builder setArgs(
        int index, org.tracing.network.language.common.KeyStringValuePair.Builder builderForValue) {
      if (argsBuilder_ == null) {
        ensureArgsIsMutable();
        args_.set(index, builderForValue.build());
        onChanged();
      } else {
        argsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public Builder addArgs(org.tracing.network.language.common.KeyStringValuePair value) {
      if (argsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArgsIsMutable();
        args_.add(value);
        onChanged();
      } else {
        argsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public Builder addArgs(
        int index, org.tracing.network.language.common.KeyStringValuePair value) {
      if (argsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArgsIsMutable();
        args_.add(index, value);
        onChanged();
      } else {
        argsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public Builder addArgs(
        org.tracing.network.language.common.KeyStringValuePair.Builder builderForValue) {
      if (argsBuilder_ == null) {
        ensureArgsIsMutable();
        args_.add(builderForValue.build());
        onChanged();
      } else {
        argsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public Builder addArgs(
        int index, org.tracing.network.language.common.KeyStringValuePair.Builder builderForValue) {
      if (argsBuilder_ == null) {
        ensureArgsIsMutable();
        args_.add(index, builderForValue.build());
        onChanged();
      } else {
        argsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public Builder addAllArgs(
        java.lang.Iterable<? extends org.tracing.network.language.common.KeyStringValuePair> values) {
      if (argsBuilder_ == null) {
        ensureArgsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, args_);
        onChanged();
      } else {
        argsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public Builder clearArgs() {
      if (argsBuilder_ == null) {
        args_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        argsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public Builder removeArgs(int index) {
      if (argsBuilder_ == null) {
        ensureArgsIsMutable();
        args_.remove(index);
        onChanged();
      } else {
        argsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public org.tracing.network.language.common.KeyStringValuePair.Builder getArgsBuilder(
        int index) {
      return getArgsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public org.tracing.network.language.common.KeyStringValuePairOrBuilder getArgsOrBuilder(
        int index) {
      if (argsBuilder_ == null) {
        return args_.get(index);  } else {
        return argsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public java.util.List<? extends org.tracing.network.language.common.KeyStringValuePairOrBuilder> 
         getArgsOrBuilderList() {
      if (argsBuilder_ != null) {
        return argsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(args_);
      }
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public org.tracing.network.language.common.KeyStringValuePair.Builder addArgsBuilder() {
      return getArgsFieldBuilder().addBuilder(
          org.tracing.network.language.common.KeyStringValuePair.getDefaultInstance());
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public org.tracing.network.language.common.KeyStringValuePair.Builder addArgsBuilder(
        int index) {
      return getArgsFieldBuilder().addBuilder(
          index, org.tracing.network.language.common.KeyStringValuePair.getDefaultInstance());
    }
    /**
     * <pre>
     * Data content in command.
     * The value of content needs to be serialized as string for transmission.
     *
     * Basic data type: convert as string.
     * The list of basic data: multiple data are split by ",".
     * Complex data: serialize string through json.
     * </pre>
     *
     * <code>repeated .deeptracing.v1.KeyStringValuePair args = 2;</code>
     */
    public java.util.List<org.tracing.network.language.common.KeyStringValuePair.Builder> 
         getArgsBuilderList() {
      return getArgsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.tracing.network.language.common.KeyStringValuePair, org.tracing.network.language.common.KeyStringValuePair.Builder, org.tracing.network.language.common.KeyStringValuePairOrBuilder> 
        getArgsFieldBuilder() {
      if (argsBuilder_ == null) {
        argsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.tracing.network.language.common.KeyStringValuePair, org.tracing.network.language.common.KeyStringValuePair.Builder, org.tracing.network.language.common.KeyStringValuePairOrBuilder>(
                args_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        args_ = null;
      }
      return argsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:deeptracing.v1.Command)
  }

  // @@protoc_insertion_point(class_scope:deeptracing.v1.Command)
  private static final org.tracing.network.language.common.Command DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.tracing.network.language.common.Command();
  }

  public static org.tracing.network.language.common.Command getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Command>
      PARSER = new com.google.protobuf.AbstractParser<Command>() {
    @java.lang.Override
    public Command parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Command> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Command> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.tracing.network.language.common.Command getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

